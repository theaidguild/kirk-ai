{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kirk-ai","text":"<p>Lightweight CLI for interacting with Ollama AI models.</p> <p>Welcome \u2014 this documentation covers how to install, build, and use the <code>kirk-ai</code> command-line tool.</p>"},{"location":"#quick-links","title":"Quick links","text":"<ul> <li>Installation</li> <li>Usage</li> <li>Commands</li> <li>Architecture</li> <li>Contributing</li> </ul>"},{"location":"architecture/","title":"Architecture","text":"<p>kirk-ai follows a simple modular architecture:</p> <ul> <li><code>cmd/</code> \u2014 Cobra commands that implement CLI entry points</li> <li><code>internal/client</code> \u2014 Ollama HTTP client</li> <li><code>internal/models</code> \u2014 request/response structs</li> <li><code>internal/templates</code> \u2014 prompt templates used for code generation</li> </ul> <p>The codebase intentionally keeps dependencies minimal and relies on the Go standard library for HTTP operations.</p> <p>See the <code>internal/</code> folder for implementation details and the <code>cmd/</code> folder for how commands are wired together.</p>"},{"location":"commands/","title":"Commands","text":"<p>This project uses the Cobra CLI framework. The main commands are:</p> <ul> <li><code>chat</code> \u2014 interact with chat models</li> <li><code>embed</code> \u2014 generate vector embeddings</li> <li><code>models</code> \u2014 list available models</li> <li><code>benchmark</code> \u2014 run model benchmarks</li> <li><code>code</code> \u2014 generate code using the recommended coding model</li> </ul> <p>Each command supports <code>--model</code>, <code>--verbose</code>, and <code>--stream</code> flags where appropriate.</p> <p>Example:</p> <pre><code>./kirk-ai chat \"Explain recursion\" --verbose\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Thanks for considering contributing! Guidelines:</p> <ul> <li>Run <code>go fmt ./...</code> before committing.</li> <li>Run <code>go vet ./...</code> to catch vet issues.</li> <li>Add tests alongside code in <code>_test.go</code> files.</li> <li>For documentation changes, edit the markdown files in <code>docs_src/</code> and preview locally with <code>mkdocs serve</code>.</li> </ul> <p>To publish docs changes:</p> <ol> <li>Edit files in <code>docs_src/</code> and commit to <code>main</code>.</li> <li>Push the commit to <code>main</code> and the Pages workflow will build and deploy the site.</li> </ol>"},{"location":"installation/","title":"Installation","text":"<p>Requirements:</p> <ul> <li>Go 1.19 or higher</li> <li>Ollama (optional, for functional testing)</li> </ul> <p>Install from source:</p> <pre><code># download dependencies\ngo mod download &amp;&amp; go mod tidy\n\n# build\ngo build -v .\n</code></pre> <p>Run directly for development:</p> <pre><code>go run main.go\n</code></pre> <p>If you want to serve docs locally during writing:</p> <pre><code>pip install mkdocs\nmkdocs serve\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>This section explains common usage patterns for <code>kirk-ai</code>.</p>"},{"location":"usage/#list-models","title":"List models","text":"<pre><code>./kirk-ai models\n</code></pre>"},{"location":"usage/#chat","title":"Chat","text":"<pre><code>./kirk-ai chat \"Hello! Tell me a joke\"\n</code></pre>"},{"location":"usage/#embeddings","title":"Embeddings","text":"<pre><code>./kirk-ai embed \"This is some text to embed\"\n</code></pre>"},{"location":"usage/#build-and-run","title":"Build and run","text":"<pre><code>go build -v .\n./kirk-ai --help\n</code></pre>"}]}