{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kirk-ai Lightweight CLI for interacting with Ollama AI models. Welcome \u2014 this documentation covers how to install, build, and use the kirk-ai command-line tool. Quick links Installation Usage Commands Architecture Contributing","title":"Home"},{"location":"#kirk-ai","text":"Lightweight CLI for interacting with Ollama AI models. Welcome \u2014 this documentation covers how to install, build, and use the kirk-ai command-line tool.","title":"kirk-ai"},{"location":"#quick-links","text":"Installation Usage Commands Architecture Contributing","title":"Quick links"},{"location":"architecture/","text":"Architecture kirk-ai follows a simple modular architecture: cmd/ \u2014 Cobra commands that implement CLI entry points internal/client \u2014 Ollama HTTP client internal/models \u2014 request/response structs internal/templates \u2014 prompt templates used for code generation The codebase intentionally keeps dependencies minimal and relies on the Go standard library for HTTP operations. See the internal/ folder for implementation details and the cmd/ folder for how commands are wired together.","title":"Architecture"},{"location":"architecture/#architecture","text":"kirk-ai follows a simple modular architecture: cmd/ \u2014 Cobra commands that implement CLI entry points internal/client \u2014 Ollama HTTP client internal/models \u2014 request/response structs internal/templates \u2014 prompt templates used for code generation The codebase intentionally keeps dependencies minimal and relies on the Go standard library for HTTP operations. See the internal/ folder for implementation details and the cmd/ folder for how commands are wired together.","title":"Architecture"},{"location":"commands/","text":"Commands This project uses the Cobra CLI framework. The main commands are: chat \u2014 interact with chat models embed \u2014 generate vector embeddings models \u2014 list available models benchmark \u2014 run model benchmarks code \u2014 generate code using the recommended coding model Each command supports --model , --verbose , and --stream flags where appropriate. Example: ./kirk-ai chat \"Explain recursion\" --verbose","title":"Commands"},{"location":"commands/#commands","text":"This project uses the Cobra CLI framework. The main commands are: chat \u2014 interact with chat models embed \u2014 generate vector embeddings models \u2014 list available models benchmark \u2014 run model benchmarks code \u2014 generate code using the recommended coding model Each command supports --model , --verbose , and --stream flags where appropriate. Example: ./kirk-ai chat \"Explain recursion\" --verbose","title":"Commands"},{"location":"contributing/","text":"Contributing Thanks for considering contributing! Guidelines: Run go fmt ./... before committing. Run go vet ./... to catch vet issues. Add tests alongside code in _test.go files. For documentation changes, edit the markdown files in docs_src/ and preview locally with mkdocs serve . To publish docs changes: Edit files in docs_src/ and commit to main . Push the commit to main and the Pages workflow will build and deploy the site.","title":"Contributing"},{"location":"contributing/#contributing","text":"Thanks for considering contributing! Guidelines: Run go fmt ./... before committing. Run go vet ./... to catch vet issues. Add tests alongside code in _test.go files. For documentation changes, edit the markdown files in docs_src/ and preview locally with mkdocs serve . To publish docs changes: Edit files in docs_src/ and commit to main . Push the commit to main and the Pages workflow will build and deploy the site.","title":"Contributing"},{"location":"installation/","text":"Installation Requirements: Go 1.19 or higher Ollama (optional, for functional testing) Install from source: # download dependencies go mod download && go mod tidy # build go build -v . Run directly for development: go run main.go If you want to serve docs locally during writing: pip install mkdocs mkdocs serve","title":"Installation"},{"location":"installation/#installation","text":"Requirements: Go 1.19 or higher Ollama (optional, for functional testing) Install from source: # download dependencies go mod download && go mod tidy # build go build -v . Run directly for development: go run main.go If you want to serve docs locally during writing: pip install mkdocs mkdocs serve","title":"Installation"},{"location":"usage/","text":"Usage This section explains common usage patterns for kirk-ai . List models ./kirk-ai models Chat ./kirk-ai chat \"Hello! Tell me a joke\" Embeddings ./kirk-ai embed \"This is some text to embed\" Build and run go build -v . ./kirk-ai --help","title":"Usage"},{"location":"usage/#usage","text":"This section explains common usage patterns for kirk-ai .","title":"Usage"},{"location":"usage/#list-models","text":"./kirk-ai models","title":"List models"},{"location":"usage/#chat","text":"./kirk-ai chat \"Hello! Tell me a joke\"","title":"Chat"},{"location":"usage/#embeddings","text":"./kirk-ai embed \"This is some text to embed\"","title":"Embeddings"},{"location":"usage/#build-and-run","text":"go build -v . ./kirk-ai --help","title":"Build and run"}]}